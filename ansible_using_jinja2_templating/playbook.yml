#Task: Update the msg field in debug task to print - "The name is bond! james bond!"

-
  name: Test Jinja2 Templating
  hosts: localhost
  vars:
    first_name: james
    last_name: bond
  tasks:
  - debug:
      msg: 'The name is {{ last_name }}! {{ first_name }} {{ last_name }}!'

#Task: Update the msg field in debug task to print name in title case - "The name is Bond! James Bond!"

-
  name: Test Jinja2 Templating
  hosts: localhost
  vars:
    first_name: james
    last_name: bond
  tasks:
  - debug:
      msg: 'The name is {{ last_name | title }}! {{ first_name | title }} {{ last_name | title }}!'

#Task: Update the msg field in debug task to print the lowest number in the given list using jinja2 filter 'min' - "Lowest = 6"

-
  name: Test Jinja2 Templating
  hosts: localhost
  vars:
    array_of_numbers:
      - 12
      - 34
      - 06
      - 34
  tasks:
  - debug:
      msg: 'Lowest = {{ array_of_numbers | min }}'

#Introduction: We are given two lists of dependent packages to install. A playbook is written with a task to install dependencies.
#Task: Identify the unique packages from the two lists using jinja2 filter union and apply it in the given space under with_items.

-
  name: Install Dependencies
  hosts: localhost
  vars:
    web_dependencies:
         - python
         - python-setuptools
         - python-dev
         - build-essential
         - python-pip
         - python-mysqldb
    sql_dependencies:
         - python
         - python-mysqldb
  tasks:
  - name: Install dependencies
    apt: name='{{ item }}' state=installed
    with_items: '{{ web_dependencies | union (sql_dependencies) }}'

# We are trying to write a playbook to generate a file with random name everytime. The first name must be /tmp/random_file_ followed by a random number. eg: /tmp/random_1234
# # Task: Update the task to modify the file name to use a random number suffix anywhere from 0 to 1000.

-
  name: Generate random file name
  hosts: localhost
  tasks:
  - name: Install dependencies
    file:
      path: /tmp/random_file"{{ 1000 | random }}"
      state: touch

# Test if a given variable has a valid IP address.
# # Task: Apply the ipaddr filter to the ip_address in the msg field of debug task to test if IP is valid. It will return false if IP is invalid

-
  name: Test valid IP Address
  hosts: localhost
  vars:
    ip_address: 192.168.1.6
  tasks:
  - name: Test IP Address
    debug:
      msg: IP Address = {{ ip_address | ipaddr }}

# Retrieve the file name from a given path in linux
# # Task: Use the 'basename' filter to retrieve the file name

-
  name: Get filename
  hosts: localhost
  vars:
    file_path: /etc/hosts
  tasks:
  - name: Get filename
    debug:
      msg: File Name = {{file_path | basename }}
